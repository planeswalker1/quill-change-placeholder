{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","quillText","updatedQuillPlaceholder","quillRef","reactQuillRef","attachQuillRefs","_this","getEditor","handleInputChange","e","setState","target","value","console","log","root","dataset","placeholder","handleQuillChange","modules","toolbar","header","font","size","list","formats","this","_this2","react_default","a","createElement","htmlFor","id","type","onChange","lib_default","ref","el","data-placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMA2FeA,qNAtFbC,MAAQ,CACNC,UAAW,GACXC,wBAAyB,QAG3BC,SAAW,OACXC,cAAgB,OAUhBC,gBAAkB,WAC4B,oBAAjCC,EAAKF,cAAcG,YAG9BD,EAAKH,SAAWG,EAAKF,cAAcG,gBAGrCC,kBAAoB,SAACC,GACnBH,EAAKI,SAAS,CACZR,wBAAyBO,EAAEE,OAAOC,OACjC,WACCC,QAAQC,IAAIR,EAAKH,SAASY,KAAKC,QAAQC,aACvCX,EAAKH,SAASY,KAAKC,QAAQC,YAAcX,EAAKN,MAAME,6BAI1DgB,kBAAoB,SAACT,GACnBH,EAAKI,SAAS,CACZT,UAAWQ,OAIfU,QAAU,CACRC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,KAAO,CAAEC,KAAM,KAC3C,CAAC,CAAEC,KAAM,KACT,CAAC,OAAQ,SAAU,YAAa,SAAU,cAC1C,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,QACD,CAAC,SACD,CAAC,kBAILC,QAAU,CACR,SACA,OACA,OACA,OACA,SACA,YACA,SACA,aACA,OACA,SACA,OACA,iGArDAC,KAAKrB,+DAILqB,KAAKrB,mDAoDE,IAAAsB,EAAAD,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,2BAAf,oCACAH,EAAAC,EAAAC,cAAA,SACEE,GAAG,0BACHC,KAAK,OACLrB,MAAOc,KAAK1B,MAAME,wBAClBgC,SAAUR,KAAKlB,oBAEjBoB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,IAAK,SAACC,GAASV,EAAKvB,cAAgBiC,GACpCzB,MAAOc,KAAK1B,MAAMC,UAClBiC,SAAUR,KAAKR,kBACfoB,mBAAiB,KACjBrB,YAAY,eAjFJsB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2cbc85d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nclass App extends Component {\n  state = {\n    quillText: '',\n    updatedQuillPlaceholder: 'hi'\n  }\n  \n  quillRef = null;      // Quill instance\n  reactQuillRef = null; // ReactQuill component\n\n  componentDidMount() {\n    this.attachQuillRefs()\n  }\n\n  componentDidUpdate() {\n    this.attachQuillRefs()\n  }\n  \n  attachQuillRefs = () => {\n    if (typeof this.reactQuillRef.getEditor !== 'function') {\n      return;\n    }\n    this.quillRef = this.reactQuillRef.getEditor();\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      updatedQuillPlaceholder: e.target.value \n    }, () => {\n        console.log(this.quillRef.root.dataset.placeholder);\n        this.quillRef.root.dataset.placeholder = this.state.updatedQuillPlaceholder;\n    });\n  }\n\n  handleQuillChange = (e) => {\n    this.setState({\n      quillText: e\n    });\n  }\n  \n  modules = {\n    toolbar: [\n      [{ header: '1' }, { header: '2' }, { font: [] }],\n      [{ size: [] }],\n      ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      ['link'],\n      ['clean'],\n      ['code-block']\n    ]\n  }\n\n  formats = [\n    'header',\n    'font',\n    'size',\n    'bold',\n    'italic',\n    'underline',\n    'strike',\n    'blockquote',\n    'list',\n    'bullet',\n    'link',\n    'code-block'\n  ]\n  \n  render() {\n    return (\n      <div>\n        <label htmlFor=\"quillPlaceholderChanger\">Change React Quill Placeholder: </label>\n        <input\n          id=\"quillPlaceholderChanger\"\n          type=\"text\"\n          value={this.state.updatedQuillPlaceholder}\n          onChange={this.handleInputChange} />\n\n        <ReactQuill\n          ref={(el) => { this.reactQuillRef = el }}\n          value={this.state.quillText}\n          onChange={this.handleQuillChange}\n          data-placeholder='hi'\n          placeholder='hi' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}